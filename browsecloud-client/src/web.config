<?xml version="1.0" encoding="utf-8" ?>

<!-- Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the MIT License. -->

<configuration>
    <system.webServer>

        <httpProtocol>
            <customHeaders>
                <add name="Strict-Transport-Security" value="max-age=31536000" />
                <add name="X-Content-Type-Options" value="nosniff" />
                <add name="X-Frame-Options" value="SAMEORIGIN" />
            </customHeaders>
        </httpProtocol>

        <!-- Enable more aggresive caching by promoting to a frequentHit with a lower threshold -->
        <serverRuntime enabled="true"  frequentHitThreshold="1"  frequentHitTimePeriod="00:00:20" />

        <webSocket enabled="false" />

        <handlers>
            <!-- Use iisnode to host node.js app with prerender middleware.
                Docs: https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config -->
            <add name="iisnode" path="index.js" verb="*" modules="iisnode"/>
        </handlers>

        <rewrite>
            <rules>

                <!-- Explicitly block issnode's remote inspector path -->
                <rule name="Block iisnode's node-inspector debugger path" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^index.js\/debug[\/]?" />
                </rule>

                <!-- Force https connections only -->
                <rule name="Redirect to https" stopProcessing="true">
                    <match url="(.*)" />
                    <conditions>
                        <add input="{HTTPS}" pattern="off" ignoreCase="true" />
                    </conditions>
                    <action type="Redirect" url="https://{HTTP_HOST}{REQUEST_URI}" redirectType="Permanent" appendQueryString="false" />
                </rule>

                <!-- Check the user agent and query params for signatures of a crawler bot. If it is a bot, redirect to the node.js app with prerendering middleware -->
                <rule name="Crawler prerender rewrite" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url=".*" ignoreCase="true" negate="false" />
                    <conditions logicalGrouping="MatchAny" trackAllCaptures="false">
                        <add input="{QUERY_STRING}" pattern="_escaped_fragment_" />
                        <add input="{HTTP_USER_AGENT}" pattern="googlebot|yahoo|bingbot|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|developers\.google\.com\/\+\/web\/snippet|slackbot|vkShare|W3C_Validator|redditbot|Applebot|WhatsApp|flipboard|tumblr|bitlybot|SkypeUriPreview|nuzzel|Discordbot|Google Page Speed|Qwantify|pinterestbot|Bitrix link preview|XING-contenttabreceiver" />
                    </conditions>
                    <action type="Rewrite" url="index.js"/>
                </rule>

                <!-- Rewrite node app artifacts to angular app so they're not publically accessible -->
                <rule name="Rewrite prerender app" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAny">
                        <add input="{REQUEST_FILENAME}" pattern="package\.json" negate="false" />
                        <add input="{REQUEST_FILENAME}" pattern="package-lock\.json" negate="false" />
                        <add input="{REQUEST_FILENAME}" pattern="index\.js" negate="false" />
                        <add input="{REQUEST_FILENAME}" pattern="node_modules" negate="false" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                </rule>

                <!-- Assets folder must be as is -->
                <rule name="Assets folder" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAny">
                        <add input="{REQUEST_FILENAME}" pattern="assets" negate="false" />
                    </conditions>
                    <action type="Rewrite" url="{REQUEST_URI}" />
                </rule>

                <!-- Rewrite everything else (not caught by the above rules) to the angular app -->
                <rule name="Serve static angular app" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                </rule>

            </rules>
        </rewrite>

        <!-- Increase cache for specific static content -->
        <staticContent>
            <clientCache cacheControlCustom="public" cacheControlMode="UseMaxAge" cacheControlMaxAge="14.00:00:00" />
            <mimeMap fileExtension="ttf" mimeType="application/octet-stream" />
            <mimeMap fileExtension="woff" mimeType="application/font-woff" />
            <mimeMap fileExtension="woff2" mimeType="application/font-woff" />
            <mimeMap fileExtension="json" mimeType="application/json" />
            <mimeMap fileExtension="mp4" mimeType="video/mp4" />
            <mimeMap fileExtension="docx" mimeType="application/vnd.openxmlformats-officedocument.wordprocessingml.document" />
            <mimeMap fileExtension="pdf" mimeType="application/pdf" />
        </staticContent>

        <!-- Set node.js app to production mode for performance and disable debugging -->
        <iisnode node_env="production" debuggingEnabled="false" />

    </system.webServer>

    <!-- Serve the root of the app with a low cache time so clients always have close to latest. But prevents refresh spamming. -->
    <location path="index.html">
        <system.webServer>
            <staticContent>
                <clientCache cacheControlCustom="public" cacheControlMode="UseMaxAge" cacheControlMaxAge="00.00:00:10" />
            </staticContent>
        </system.webServer>
    </location>

</configuration>